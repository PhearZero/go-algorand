// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
