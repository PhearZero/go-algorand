// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtpIo/lVQ2q3yY8UZ23GyJ/7Vqf1N7CRnNk7i8jjZu2vnngORLQlnKIABwBkp",
	"vv7ut9ANkCAJStTMxEnq5i97RDwajUajX+h+P8vVplISpDWzZ+9nFdd8AxY0/sXzXNXSZqJwfxVgci0q",
	"K5ScPQvfmLFayNVsPhPu14rb9Ww+k3wDbRvXfz7T8HMtNBSzZ1bXMJ+ZfA0b7ga2u8q1bkbaZiuV+SHO",
	"aIjzF7MPez7wotBgzBDK72W5Y0LmZV0As5pLw3P3ybBrYdfMroVhvjMTkikJTC2ZXXcas6WAsjAnYZE/",
	"16B30Sr95ONL+tCCmGlVwhDO52qzEBICVNAA1WwIs4oVsMRGa26Zm8HBGhpaxQxwna/ZUukDoBIQMbwg",
	"683s2duZAVmAxt3KQVzhf5ca4BfILNcrsLOf5qnFLS3ozIpNYmnnHvsaTF1aw7AtrnElrkAy1+uEfVsb",
	"yxbAuGSvv3rOPvnkk8/dQjbcWig8kY2uqp09XhN1nz2bFdxC+DykNV6ulOayyJr2r796jvNf+AVObcWN",
	"gfRhOXNf2PmLsQWEjgkSEtLCCvehQ/2uR+JQtD8vYKk0TNwTanynmxLP/5vuSs5tvq6UkDaxLwy/Mvqc",
	"5GFR9308rAGg075ymNJu0LePss9/ev94/vjRh395e5b9j//z008+TFz+82bcAxhINsxrrUHmu2ylgeNp",
	"WXM5xMdrTw9mreqyYGt+hZvPN8jqfV/m+hLrvOJl7ehE5FqdlStlGPdkVMCS16VlYWJWy9KxKTeap3Ym",
	"DKu0uhIFFHPHfa/XIl+znBsaAtuxa1GWjgZrA8UYraVXt+cwfYhR4uC6ET5wQb9fZLTrOoAJ2CI3yPJS",
	"GcisOnA9hRuHy4LFF0p7V5njLiv2Zg0MJ3cf6LJF3ElH02W5Yxb3tWDcMM7C1TRnYsl2qmbXuDmluMT+",
	"fjUOaxvmkIab07lH3eEdQ98AGQnkLZQqgUtEXjh3Q5TJpVjVGgy7XoNd+ztPg6mUNMDU4p+QW7ft/3nx",
	"/XdMafYtGMNX8IrnlwxkrgooTtj5kkllI9LwtIQ4dD3H1uHhSl3y/zTK0cTGrCqeX6Zv9FJsRGJV3/Kt",
	"2NQbJuvNArTb0nCFWMU02FrLMYBoxAOkuOHb4aRvdC1z3P922o4s56hNmKrkO0TYhm//+mjuwTGMlyWr",
	"QBZCrpjdylE5zs19GLxMq1oWE8Qc6/Y0ulhNBblYCihYM8oeSPw0h+AR8jh4WuErAicMMgpOM8sBcCRs",
	"EzTjTrf7wiq+gohkTtgPnrnhV6suQTaEzhY7/FRpuBKqNk2nERhx6v0SuFQWskrDUiRo7MKjwzEYauM5",
	"8MbLQLmSlgsJhWPOCLSyQMxqFKZowv36zvAWX3ADnz0du+PbrxN3f6n6u753xyftNjbK6Egmrk731R/Y",
	"tGTV6T9BP4znNmKV0c+DjRSrN+62WYoSb6J/uv0LaKgNMoEOIsLdZMRKcltrePZOPnR/sYxdWC4Lrgv3",
	"y4Z++rYurbgQK/dTST+9VCuRX4jVCDIbWJMKF3bb0D9uvDQ7ttukXvFSqcu6iheUdxTXxY6dvxjbZBrz",
	"WMI8a7TdWPF4sw3KyLE97LbZyBEgR3FXcdfwEnYaHLQ8X+I/2yXSE1/qX9w/VVW63rZaplDr6NhfyWg+",
	"8GaFs6oqRc4dEl/7z+6rYwJAigRvW5zihfrsfQRipVUF2goalFdVVqqcl5mx3OJI/6phOXs2+5fT1v5y",
	"St3NaTT5S9frAjs5kZXEoIxX1RFjvHKij9nDLByDxk/IJojtodAkJG2iIyXhWHAJV1zak1Zl6fCD5gC/",
	"9TO1+CZph/DdU8FGEc6o4QIMScDU8J5hEeoZopUhWlEgXZVq0fxw/6yqWgzi97OqInyg9AgCBTPYCmPN",
	"A1w+b09SPM/5ixP2dTw2iuJKljt3OZCo4e6Gpb+1/C3W2Jb8GtoR7xmG26n0iduagAYn5t8FxaFasVal",
	"k3oO0opr/DffNiYz9/ukzn8MEotxO05cqGh5zJGOg79Eys39HuUMCcebe07YWb/vzcjGjbKHYMx5i8W7",
	"Jh78RVjYmIOUEEEUUZPfHq413828kJihsDckkx8MEIVUfCUkQjt36pNkG35J+6EQ744QwDR6EdESSZCN",
	"CdXLnB71JwM7yx+AWlMbGyRRJ6mWwljUq7ExW0OJgjOXgaBjUrkRZUzY8D2LaGC+1rwiWvZfSOwSEvV5",
	"akSw3vLinXgnJmGO2H200QjVjdnyQdaZhAS5Rg+GL0qVX/6Nm/UdnPBFGGtI+zgNWwMvQLM1N+vEwenR",
	"djvaFPp2DZFm2SKa6qRZ4ku1MnewxFIdw7qq6jkvSzf1kGX1VosDTzrIZclcYwYbgQZzrziShZ30L/Yl",
	"z9dOLGA5L8t5aypSVVbCFZROaRdSgp4zu+a2Pfw4ctBr8BwZcMzOAotW481MaGLTjS1CA9twvIE2Tpup",
	"ym6fhoMavoGeFIQ3oqrRihApGucvwurgCiTypGZoBL9ZI1pr4sFP3Nz+E84sFS2OLIA2uO8a/DX8ogO0",
	"a93ep7KdQumCbNbW/SY0y5WmIeiG95O7/wDXbWeizvuVhswPofkVaMNLt7reoh405HtXp/PAySy45dHJ",
	"9FSYVsCIc2A/FO9AJ6w03+N/eMncZyfFOEpqqUegMKIid2pBF7NDFc3kGqC9VbENmTJZxfPLo6B83k6e",
	"ZjOTTt6XZD31W+gX0ezQm60ozF1tEw42tlfdE0K2q8COBrLIXqYTzTUFAW9UxYh99EAgToGjEULU9s6v",
	"tS/UNgXTF2o7uNLUFu5kJ9w4k5n9F2r7wkOm9GHM49hTkO4WKPkGDN5uMmacbpbWL3e2UPpm0kTvgpGs",
	"9TYy7kaNhKl5D0nYtK4yfzYTHgtq0BuoDfDYLwT0h09hrIOFC8t/BSwYN+pdYKE70F1jQW0qUcIdkP46",
	"KcQtuIFPnrCLv519+vjJ3598+pkjyUqrleYbtthZMOy+N8sxY3clPEhqRyhdpEf/7GnwUXXHTY1jVK1z",
	"2PBqOBT5vkj7pWbMtRtirYtmXHUD4CSOCO5qI7Qzcus60F7Aol5dgLVO032l1fLOueFghhR02OhVpZ1g",
	"Ybp+Qi8tnRauySlsreanFbYEWVCcgVuHME4H3CzuhKjGNr5oZymYx2gBBw/FsdvUTrOLt0rvdH0X5g3Q",
	"WunkFVxpZVWuyszJeUIlDBSvfAvmW4Ttqvq/E7Tsmhvm5kbvZS2LETuE3crp9xcN/WYrW9zsvcFovYnV",
	"+Xmn7EsX+a0WUoHO7FYypM6OeWSp1YZxVmBHlDW+Bkvyl9jAheWb6vvl8m6snQoHSthxxAaMm4lRCyf9",
	"GMiVpGC+AyYbP+oU9PQRE7xMdhwAj5GLnczRVXYXx3bcmrUREv32ZifzyLTlYCyhWHXI8vYmrDF00FT3",
	"TAIch46X+Blt9S+gtPwrpd+04uvXWtXVnbPn/pxTl8P9Yrw3oHB9gxlYyFXZDSBdOdhPUmv8TRb0vDEi",
	"0BoQeqTIl2K1tpG++EqrX+FOTM6SAhQ/kLGodH2GJqPvVOGYia3NHYiS7WAth3N0G/M1vlC1ZZxJVQBu",
	"fm3SQuZIyCHGOmGIlo3lVrRPCMMW4Kgr57VbbV0xDEAa3Bdtx4zndEIzRI0ZCb9o4maoFU1H4WylBl7s",
	"2AJAMrXwMQ4++gIXyTF6ygYxzYu4CX7RgavSKgdjoMi8KfogaKEdXR12D54QcAS4mYUZxZZc3xrYy6uD",
	"cF7CLsNYP8Puf/OjefAbwGuV5eUBxGKbFHr79rQh1NOm30dw/cljsiNLHVGtE28dgyjBwhgKj8LJ6P71",
	"IRrs4u3RcgUaQ0p+VYoPk9yOgBpQf2V6vy20dTUSwe7VdCfhuQ2TXKogWKUGK7mx2SG27Bp1bAluBREn",
	"THFiHHhE8HrJjaUwKCELtGnSdYLzkBDmphgHeFQNcSP/GDSQ4di5uwelqU2jjpi6qpS2UKTWgB7Z0bm+",
	"g20zl1pGYzc6j1WsNnBo5DEsReN7ZHkNGP/gtvG/eo/ucHHoU3f3/C6Jyg4QLSL2AXIRWkXYjaN4RwAR",
	"pkU0EY4wPcppQofnM2NVVTluYbNaNv3G0HRBrc/sD23bIXGRk4Pu7UKBQQeKb+8hvybMUvz2mhvm4Qgu",
	"djTnULzWEGZ3GDMjZA7ZPspHFc+1io/AwUNaVyvNC8gKKPkuERxAnxl93jcA7nir7ioLGQXipje9peQQ",
	"97hnaIXjmZTwyPALy90RdKpASyC+94GRC8CxU8zJ09G9ZiicK7lFYTxcNm11YkS8Da+UdTvu6QFB9hx9",
	"CsAjeGiGvjkqsHPW6p79Kf4bjJ+gkSOOn2QHZmwJ7fhHLWDEFuzfOEXnpcfeexw4yTZH2dgBPjJ2ZEcM",
	"06+4tiIXFeo638DuzlW//gRJxzkrwHJRQsGiD6QGVnF/RiGk/TFvpgpOsr0NwR8Y3xLLCWE6XeAvYYc6",
	"9yt6mxCZOu5Cl02M6u4nLhkCGiKenQgeN4Etz225c4KaXcOOXYMGZuoFhTAM/SlWVVk8QNI/s2dG751N",
	"+kb3uosvcKhoealYM9IJ9sP3pqcYdNDhdYFKqXKChWyAjCQEk2JHWKXcrgv//Ck8gAmU1AHSM210zTfX",
	"/z3TQTOugP23qlnOJapctYVGplEaBQUUIN0MTgRr5vTBiS2GoIQNkCaJXx4+7C/84UO/58KwJVyHN4Ou",
	"YR8dDx+iHeeVMrZzuO7AHuqO23ni+kDHlbv4vBbS5ymHI578yFN28lVv8Mbb5c6UMZ5w3fJvzQB6J3M7",
	"Ze0xjUyL9sJxJ/lyuvFBg3Xjvl+ITV1yexdeK7jiZaauQGtRwEFO7icWSn55xcvvm274HhJyR6M5ZDm+",
	"4ps4FrxxfejhnxtHSOEOMAX9TwUIzqnXBXU6oGK2kapis4FCcAvljlUacqD3bk5yNM1STxhFwudrLleo",
	"MGhVr3xwK42DDL82ZJrRtRwMkRSq7FZmaOROXQA+TC08eXTiFHCn0vUt5KTAXPNmPv/KdcrNHO1B32OQ",
	"dJLNZ6Mar0PqVavxEnK67zYnXAYdeS/CTzvxRFcKos7JPkN8xdviDpPb3F/HZN8OnYJyOHEU8dt+HAv6",
	"dep2ubsDoYcGYhoqDQavqNhMZeirWsZvtEOo4M5Y2Awt+dT17yPH7/WovqhkKSRkGyVhl0xLIiR8ix+T",
	"xwmvyZHOKLCM9e3rIB34e2B155lCjbfFL+52/4T2PVbmK6XvyiVKA04W7yd4IA+62/2UN/WT8rJMuBb9",
	"C84+AzDzJlhXaMaNUblAme28MHMfFUzeSP/cs4v+V827lDs4e/1xez60ODkA2oihrBhneSnQgqyksbrO",
	"7TvJ0UYVLTURxBWU8XGr5fPQJG0mTVgx/VDvJMcAvsZylQzYWELCTPMVQDBemnq1AmN7us4S4J30rYRk",
	"tRQW59q445LRealAYyTVCbXc8B1bOpqwiv0CWrFFbbvSPz5QNlaUpXfouWmYWr6T3LISuLHsWyHfbHG4",
	"4PQPR1aCvVb6ssFC+nZfgQQjTJYONvuavmJcv1/+2sf4Y7g7fQ5Bp23GhJlbZidJyv++/x/P3p5l/8Oz",
	"Xx5ln//b6U/vn3548HDw45MPf/3r/+n+9MmHvz74j39N7VSAPfV81kN+/sJrxucvUP2JQvX7sH80+/9G",
	"yCxJZHE0R4+22H1MFeEJ6EHXOGbX8E7arXSEdMVLUTjechNy6N8wg7NIp6NHNZ2N6BnDwlqPVCpuwWVY",
	"gsn0WOONpahhfGb6oTo6Jf3bczwvy1rSVgbpm95hhvgytZw3yQgoT9kzhi/V1zwEefo/n3z62WzevjBv",
	"vs/mM//1pwQli2KbyiNQwDalK8aPJO4ZVvGdAZvmHgh7MpSOYjviYTewWYA2a1F9fE5hrFikOVx4suRt",
	"Tlt5LinA350fdHHuvOdELT8+3FYDFFDZdSp/UUdQw1btbgL0wk4qra5Azpk4gZO+zadw+qIP6iuBL0Ng",
	"qlZqijbUnAMitEAVEdbjhUwyrKTop/e8wV/+5s7VIT9wCq7+nKmI3ntff/mGnXqGae5RSgsaOkpCkFCl",
	"/ePJTkCS42bxm7J38p18AUu0Pij57J0suOWnC25Ebk5rA/oLXnKZw8lKsWfhPeYLbvk7OZC0RhMrRo+m",
	"WVUvSpGzy1ghacmTkmUNR3j37i0vV+rdu58GsRlD9cFPleQvNEHmBGFV28yn+sk0XHOd8n2ZJtULjky5",
	"vPbNSkK2qslAGlIJ+fHTPI9XlemnfBguv6pKt/yIDI1PaOC2jBmrmvdoTkDxT3rd/n6n/MWg+XWwq9QG",
	"DPvHhldvhbQ/sexd/ejRJ/iyr82B8A9/5Tua3FUw2boympKib1TBhZNaibHqWcVXKRfbu3dvLfAKdx/l",
	"5Q3aOMqSYbfOq8PwwACHahfQPHEe3QCC4+jHwbi4C+oV0jqml4CfcAu7D7BvtV/R+/kbb9eBN/i8tuvM",
	"ne3kqowj8bAzTba3lROyQjSGESvUVn1ivAWwfA35pc9YBpvK7uad7iHgxwuagXUIQ7ns6IUhZlNCB8UC",
	"WF0V3IviXO76aW0MvajAQV/DJezeqDYZ0zF5bLppVczYQUVKjaRLR6zxsfVj9DffR5WFh6Y+Owk+3gxk",
	"8ayhi9Bn/CCTyHsHhzhFFJ20H2OI4DqBCCL+ERTcYKFuvFuRfmp5QuYgrbiCDEqxEotUGt7/GvrDAqyO",
	"Kn3mQR+F3AxomFgyp8ov6GL16r3mcgXuenZXqjK8pKyqyaAN1IfWwLVdALd77fwyTkgRoEOV8hpfXqOF",
	"b+6WAFu338KixU7CtdMq0FBEbXz08sl4/BkBDsUN4QndW03hZFTX9ahLZBwMt3KD3Uat9aF5MZ0hXPR9",
	"A5iyVF27fXFQKJ9tk5K6RPdLbfgKRnSX2Hs3MR9Gx+OHgxySSJIyiFr2RY2BJJAEmRpnbs3JMwzuizvE",
	"qGb2AjLDTOQg9j4jTKLtEbYoUYBtIldp77nueFEpK/AYaGnWAlq2omAAo4uR+DiuuQnHEfOlBi47STr7",
	"FdO+7EtNdx7FEkZJUZvEc+E27HPQgd7vE9SFrHQhFV2s9E9IK+d0L3y+kNoOJVE0LaCEFS2cGgdCaRMm",
	"tRvk4Ph+uUTekqXCEiMDdSQA+DnAaS4PGSPfCJs8QoqMI7Ax8AEHZt+p+GzK1TFASp/wiYex8YqI/ob0",
	"wz4K1HfCqKrc5SpG/I154AA+FUUrWfQiqnEYJuScOTZ3xUvH5rwu3g4yyJCGCkUvH5oPvXkwpmjscU3R",
	"lX/UmkhIuMlqYmk2AJ0WtfdAvFDbjF4oJ3WRxXbh6D35dgHfS6cOJuWiu2fYQm0xnAuvFoqVPwDLOBwB",
	"jMj2shUG6RX7jclZBMy+affLuSkqNEgy3tDakMuYoDdl6hHZcoxc7kfp5W4EQM8M1dZq8GaJg+aDrngy",
	"vMzbW23epk0Nz8JSx3/sCCV3aQR/Q/tYNyHc39rEf+PJxcKJ+iiZ8IaWpdtkKKTOFWUdPCZBYZ8cOkDs",
	"weqrvhyYRGs31quL1whrKVbimO/QKTlEm4ESUAnOOqJpdpmKFHC6POA9fhG6RcY63D0udw+iAEINK2Es",
	"tE6jEBf0W5jjOaZPVmo5vjpb6aVb32ulmsuf3ObYsbPMj74CjMBfCm1shh635BJco68MGpG+ck3TEmg3",
	"RJGKDYgizXFx2kvYZYUo6zS9+nm/eeGm/a65aEy9wFtMSArQWmBxjGTg8p6pKbZ974Jf0oJf8jtb77TT",
	"4Jq6ibUjl+4cf5Bz0WNg+9hBggBTxDHctVGU7mGQ0YPzIXeMpNEopuVkn7dhcJiKMPbBKLXw7H3s5qeR",
	"kmuJ0gCmXwiq1QqKkN4s+MNklESuVHIVVXGqqn05804Ypa7DzHN7ktb5MHwYC8KPxP1MyAK2aehjrQAh",
	"b1/WYcI9nGQFktKVpM1CSdTEIf7YIrLVfWRfaP8BQDII+k3Pmd1GJ9MuNduJG1ACL7xOYiCsb/+xHG6I",
	"R918LHy6k/l0/xHCAZGmhI0KmwzTEIwwYF5Votj2HE806qgRjB9lXR6RtpC1+MEOYKAbBJ0kuE4qbR9q",
	"7Q3sp6jznjqtjGKvfWCxo2+e+wf4Ra3Rg9GJbB7mbW90tYlr/+bHC6s0X4H3QmUE0q2GwOUcg4YoK7ph",
	"VlA4SSGWS4i9L+YmnoMOcAMbezGBdBNElnbR1ELaz56myOgA9bQwHkZZmmIStDDmk38z9HIFmT4yJTVX",
	"QrQ1N3BVJZ/rfwO77Ede1k7JENq04bne7dS9fI/Y9avNN7DDkQ9GvTrADuwKWp5eA9JgytLffDJRAut7",
	"ppPiH9XLzhYesVNn6V26o63xRRnGib+9ZTpFC7pLuc3BaIMkHCxTduMiHZvgTg90Ed8n5UObIIrDMkgk",
	"78dTCRNKWA6voiYXxSHafQO8DMSLy5l9mM9uFwmQus38iAdw/aq5QJN4xkhT8gx3AnuORDmvKq2ueJn5",
	"eImxy1+rK3/5Y/MQXvGRNZk0Zb/58uzlKw/+h/ksL4HrrLEEjK4K21V/mFVRGYf9Vwll+/aGTrIURZvf",
	"ZGSOYyyuMbN3z9g0KIrSxs9ER9HHXCzTAe8HeZ8P9aEl7gn5gaqJ+Gl9nhTw0w3y4VdclMHZGKAdCU7H",
	"xU2rrJPkCvEAtw4WimK+sjtlN4PTnT4dLXUd4Ek41/eYmjKtcUifuBJZkQ/+4XcuPX2ldIf5+5eJyeCh",
	"X0+sckI24XEkVjvUr+wLUyeMBK9/rP7hTuPDh/FRe/hwzv5R+g8RgPj7wv+O+sXDh0nvYdKM5ZgEWqkk",
	"38CD5pXF6EZ8XAVcwvW0C/rsatNIlmqcDBsKpSiggO5rj71rLTw+C/9LASW4n06mKOnxphO6Y2CmnKCL",
	"sZeITZDphkpmGqZkP6YaH8E60kJm70sykDN2eIRkvUEHZmZKkadDO+TCOPYqKZjSNWbYeMRa60asxUhs",
	"rqxFNJZrNiVnag/IaI4kMk0ybWuLu4Xyx7uW4ucamCicVrMUoPFe6111QTnAUQcCadou5gcmP1U7/G3s",
	"IHv8TcEWtM8Istd/96LxKYWFpor+HBkBHs84YNx7orc9fXhqptds624I5jQ9Zkrp9MDovLNuZI5kKXRh",
	"sqVWv0DaEYL+o0QijOD4FGjm/QVkKnKvz1Iap3Jb0b2d/dB2T9eNxzb+1rpwWHRTdewml2n6VB+3kTdR",
	"ek06XbNH8pgSFkcYdJ8GjLAWPF5RMCyWQQnRR1zSeaIsEJ0XZulTGb/lPKXx21PpYR68fy359YKnasQ4",
	"XcjBFG1vJ07KKhY6hw0wTY4Dmp1FEdxNW0GZ5CrQrQ9imJX2hnoNTTtZo2kVGKSoWHWZU5hCaVRimFpe",
	"c0lVxF0/4le+twFywbte10pjHkiTDukqIBebpDn23bu3RT4M3ynESlCB7NpAVIHZD8Qo2SRSka9i3WTu",
	"8Kg5X7JH86gMvN+NQlwJIxYlYIvH1GLBDV6XjTu86eKWB9KuDTZ/MqH5upaFhsKuDSHWKNbonijkNYGJ",
	"C7DXAJI9wnaPP2f3MSTTiCt44LDohaDZs8efY0AN/fEodcv6Auf7WHaBPDsEa6fpGGNSaQzHJP2o6ejr",
	"pQb4BcZvhz2nibpOOUvY0l8oh8/Shku+gvT7jM0BmKgv7ia683t4keQNAGO12jFh0/OD5Y4/jbz5duyP",
	"wGC52myE3fjAPaM2jp7a8so0aRiOav37elEBrvAR41+rEP7Xs3V9ZDWGb0bebGGU8nfoo43ROmeckn+W",
	"oo1MD/U62XnILYwFtJq6WYQbN5dbOsqSGKi+ZJUW0qL9o7bL7C9OLdY8d+zvZAzcbPHZ00Qhqm6tFnkc",
	"4B8d7xoM6Ks06vUI2QeZxfdl96WS2cZxlOJBm2MhOpWjgbrpkMyxuND9Q0+VfN0o2Si51R1y4xGnvhXh",
	"yT0D3pIUm/UcRY9Hr+yjU2at0+TBa7dDP7x+6aWMjdKpggHtcfcShwarBVzhi7n0Jrkxb7kXupy0C7eB",
	"/reNfwoiZySWhbOcVAQij+a+x/JOiv/x2zbzOTpW6SVizwaodMLa6e12Hzna8DirW99/SwFj+G0Ec5PR",
	"hqMMsTISfU/h9U2f3yJeqA8S7XnH4Pj4H0w7HRzl+IcPEeiHD+deDP7Hk+5nYu8PH6YTECdNbu7XFgu3",
	"0Yixb2oPv1AJA1ioWtgEFPn8CAkD5Ngl5T44JrjwQ81Zt0Lcx5ci7uZ9VzraNH0K3r17i18CHvCPPiJ+",
	"Y2aJG9i+Uhg/7N0KmUmSKZrvUZw7Z1+o7VTC6d1BgXh+BygaQclE8xyuZFABNOmuPxgvEtGoG3UBpXJK",
	"ZlwUKLbn/3Hw7BY/34PtWpTFj21ut95FornM18ko4YXr+HeS0TtXMLHKZJ2RNZcSyuRwpNv+PejACS39",
	"n2rqPBshJ7btV6Cl5fYW1wLeBTMAFSZ06BW2dBPEWO2mzWrSMpQrVTCcpy1q0TLHYSnnVAnNxPtmHHZT",
	"Wx+3im/BfcKhpSgxDDPtN8aWmeZ2JIEW1jsP9YXcOFh+3JCZgUYHzbjY4MVs+KYqAU/mFWi+wq5KQq87",
	"plDDkaOKFcxU7hO2xIQVitlaS6aWy2gZIK3QUO7mrOLG0CCP3LJgi3PPnj1+9Chp9kLsTFgpYTEs8/t2",
	"KY9PsQl98UWWqBTAUcAehvVDS1HHbOyQcHxNyZ9rMDbFU/EDvVxFL6m7tameZFP79IR9jZmPHBF3Ut2j",
	"uTIkEe4m1KyrUvFijsmN33x59pLRrNSHSshTPcsVWuu65J90r0xPMBoyO41kzpk+zv5UHm7VxmZN+clU",
	"bkLXoi2QKXoxN2jHi7Fzwl6QCbUp4E+TMEyRrTdQRNUuSYlH4nD/sZbna7RNdiSgcV45vRBrYGet5yZ6",
	"fdhUP0KG7eD2tVipFOucKbsGfS0M4It8uIJuOsQmN6i3jYf0iN3l6VpKopSTI4TRptbRsWgPwJEkG4IK",
	"kpD1EH+kZYrqMR9bl/YCe6XfYvSK3Pa8/iG5Xkixzb71zoWcSyVFjqUQUpI0pm6b5qacUDUi7V80M39C",
	"E4crWVq3eQvssThabDcwQo+4ocs/+uo2laiD/rSw9SXXVmCN52xQzEOla+8QE9KAr2bliCjmk0ongpqS",
	"DyGaAIojyQizMo1YOL9y377z9m9MinEpJFq6PNq8fkYuq9II9ExLJixbKTB+Pd3XPOat63OCWRoL2P50",
	"8lKtRH4hVjgGhdG5ZVPM6HCosxBB6iM2Xdvnrq3Pnd/83AkHo0nPqspPOl4HPSlI2q0cRXAqbikEkkTI",
	"bcaPR9tDbntDv/E+dYQGVxi1BhXewwPCaGppd0f50umWRFHYgtGLymQCXSETYLwUMrhQ0xdEnrwScGPw",
	"vI70M7nmlnSHSTztDfBy5AEEvlAmH/xth+pXDnAowTWGOca3sS0DPsI4mgatxM/ljoVD4ag7Eiae87IJ",
	"nU4U9UapygtRBT4u6pX5TjEOx7iz8GSyg66Dz/ea7liN49ibaCxH4aIuVmAzXhSp1FZf4FeGX8MjMdhC",
	"XjdFqJrXgd0c5UNq8xPlSpp6s2eu0OCW00V18xPUENfuDzuMmXYWO/w3VYFpfGd80PTRr3JDhHRxXGL+",
	"4SvjlNTraDozYpVNxwTeKbdHRzv1zQi97X+nlB6e6/4uXuP2uFy8Ryn+9qW7OOLEvYP4dLpamry6GAuu",
	"8HtIeNRkhOxyJbzKBnXGMOoBNy+xZT3gQ8Mk4Fe8HHkJH/tK6H4l/8HYe/h8NH0Dtz49l+VsLwsaTXlE",
	"scI978vQhTgWH0zhwXfntfBr3YvQcd/dNx1PHcWItcxi1EN3Mydau8HHetF8wYGhSZOXpconn3o/zJnr",
	"NGoDWAKkeQ9F2SYi91GFTH5D/Sb5RV+nR+uYHvxXL88Ndh7X7gGe07u6AEyYmiaKh43smh4d7CtRYnWh",
	"/7z4/rvZOPYjtA33wefETVqCfdbwdKaa1J6uVGL1WIQn+bsZsUKHorDJD9+8SI7ls6xMwf5KpfKtD7Nn",
	"zFoshDVHm9BilU5fvCmpzfjmaixbSChZg9/j0jg+oG3uKyLAlVB1CEQMzwGCdYR+9dmoOiVwRlhB8pHN",
	"b+3AG3U3vvGlnGmZ3jz1zY8UkMBAWr37HTgfB5ver6+UUPzIUts2YU0V0ElVQTsC4pRyTqnKQV5NCmZj",
	"umU7tDSoxDQgqxdTJOMBPj7MZ+fFUbJjqvrUjEZJ3UAvxWptsXjF34AXoF8dKM7RFuTAI1YpI9pivKUb",
	"zGdDXuNwJ1Pf3TgCFnFxkeFYIR77CnKLFZjbOFMNcEypETdZ8H/+WaRj3LLUPE/ytTn2FeQYll0+IO4O",
	"cohFefCoZO3J9PITZ81rAnoMec1Nm7molz5g8iPm5RJyTBC+N2fbf61BRvnA5sFEibAsoxRuonnShynu",
	"jzfAtwDtS6m2F56o1NStwRlL6XAJu3uGdaghWUO3ec96kxzaiAHyBod06mM+FR9AKUxDGYiFEB3vs5K3",
	"dWJG059HGQhvOFcgSXdxtFkJ90yZrv8/aS7X9agMqChoj6V1G5YPH1fFX2C1duNjRXmTgzs2WLHzYQ2p",
	"a5/DGzPsNW7EkM0bTPgtpNOkWUpx6UtpIFbIaXvNdRFa3El+NLqbRBroZTOzaN8yDeN9ElVJ8FlgXion",
	"RmRjbyu7z4ea2Nt7hoKk21xWCNcStIai8Q6WykBmVXj7tA+OfaigSPAbIcGMVgIj4EazwL9u09xjRUSO",
	"Wd+5DwCPF8g0bLiDTkfJ6Mfn3Ifs5/Q95KMIFfEOGlsbej1cmjm8YhNmgMSY6pfM35aH81zcxO4qpASd",
	"BSdsPzO97CYnxBS0RZ3TBR0fjMY2PTmN1B5WkjRZ5sNV9nSEKF/EJexOSQkKNa3DDsZAk+REoEe5d3ub",
	"fKeWaJOCe3Un4P22KRUrpcpsxO93Pkyn36f4S5FfAqbDbF57ONnvXvdsuEnYfXQ3NYEd1+tdSB9fVSCh",
	"eHDC2Jmk93UhxqNbabM3ubxn982/xVmLmipcePvyyTuZfqiEtSf0LblZGGY/DzPgWN0tp6JBDiRr38qx",
	"6LNrrFPRLWh7MlUrH0Zd9KSSiKgIipRMckHO2+d40FOGI8wGEqWtQZ8+Z97py0ypUmHtN8lY4oZKYyqe",
	"DAGyIKckzmig8IMnEeAD2g5kx/SfQ/5HtWQa2niKmybC9LkliTWbMY2+P3MzS5ffLZWGeEaM16Skt80b",
	"MMwoi/9ZCKu53t0kXWUXVSnrySiWD0YmNkGJ7ULawMQhDstSXWfIrLKm5EtKtXXtTPcyDvUH237uVC8g",
	"CnHkxgtqO7bmBcuV1pDHPdJPnwmqjdKQlQojHlPBGEvr5O4NvneUrFQrpqpcFUClk9IUNDZXLSVHsQmi",
	"ALMkCoh28OE89YnoeOKU7k4ll2qGotbBSgNh89+4PpTEoU1wRovOyK0/ErwPxic08xiixkN4kXAoA1Df",
	"lpjmzUuxRboBnTryS2Z1DXPmW/TLxfuDzzWwjTCGQGlo6VqUJeZQENsoCKGJ4UmjdkTsPccI4yuBYWjd",
	"fBokDVfuzmuSjMQ84CLOAMbsWqt6tY5yrTdwBpVX114hjkf5wdQYKYiPKd0UT9lGGes1TRqpXXIbfXk/",
	"V9JqVZZdoxSJ6Ctvaf+Wb8/y3L5U6nLB88sHqNdKZZuVFvOQaqAfJ9vOpHtZ9roXcEaV/Q9nraZ2GDXq",
	"iXYyg+yxuIFR/JCVOQLzp8Mc9LDN/Wy4sP66usw0rcacScat2og8fab+WIGno+GiKRaVTN9HZUYp4Qo2",
	"w8MeX1ZNnBGyyCGaQfJkncQz5hmBj7dAduP+ixJ4f1y2BM9oRi7KIXPxUlSWj8p6PQAQUsoCYGtNtUlj",
	"SazhKmpFWUMwWqQP6MRbBYPybgebG+HOgbJwK6AGgcANgPfJ+DCnNIsUVLxQ2/D9QZuH8UbAf9hP5R3m",
	"MRbteNGSlqZ4x5CzaYQjpLO97w0NfIMZIBZTAwSbOtITb/gIgPGQwQ4MkwIHjwVjyUUJRZYqQ3re2Kjm",
	"kabtXyl2y7DjvUycPOd1qALqxq41+BxCJOLrrv+r4o6UVNN8aEmWBWyBnjj9AlpRec955H+Bkqp/9owB",
	"qspKuIJOJKVPbFSjqCmuIPQ1TWdWAFTojezbyFIhgvFd3g/IobVnUZDZFOwmLSmEWNopdsBMkjTqbGVG",
	"x8RMPUoOoitR1LyDP3OsyNE1A7qjnEDVQEfIgh45dZofaITXYYCz0D8lygRM/DSNDx3NgtKo28eADoYM",
	"12bs1Mt0xHCctatxsOBsReOIJRJv+Yap+LUcN0gOSb5Vtybuk1AyQuyXW8hRqvH6DhRe4xlxUvgEQEjt",
	"EqAgrcB1SVjb1yCZVFG11WtuGlWlTScafqCJsZGQXpu+gVO5Dey9/c4yHIyZXl7BUUVCN3R6c/P8b3IS",
	"9x7E0fFSNGLAv4TdY/8K1O3VDmyAVe2l208n+2O9Un+LeS4+Z4s6DFSW6prKp8Z66AsIflCivuAC8mK5",
	"aK7lEMA895lu+6YOET3d2PAdUxr/cVrnzzUvxXKHfIbAD92YWXNHQt7xShEBPiDaTbxfvJoHwIK1RYWp",
	"aN1i6pjRcDs3SgS0u8hDnSvFNvwS4m3AYAfin7l1jNPUC7RcuCu7t51DLPjFh2xFG17Emj7mTN11uEPI",
	"ou16/3/ts9B4qpDqsCp5Horl+mpdXT6DBbEDcdk1bPa/Gx7ytUACTZHtlmh1SDRR3MBkeiTrSj3GGatE",
	"1AF7UHx4UITpVsuYaPntlZvZ8+J60lLuehemRt0MgI5Llh4CP67g+nHwn0xnPLaMKeD/XvA+UrM5hpfK",
	"M38ELHeS0SRgJWv1Qm0zDUtzKMCEzNVOnddtGptgYhUy18ANRdycf+8VzzZbr5BOEaaY0Man2YxSwFLI",
	"llkKWdU2ocdg0l65ixAWG/0RrSMutDEpwQmTV7z8/gq0FsXYxrnTQdVN42opwdHh+yZMGM2dOhxAmFaH",
	"w6fKrRk9buYucKrHRuGaxnJZcF3EzYVkOWh377NrvjM39yg1zoFDPiUeSTPdBBqRdwlJmwApd94pfEt/",
	"TwMgv0PHzwSHDcYFJ5w1ZNqxasQ/M4ThD+Gw2fBtVqoVPqgdORA+TTN6+EgFVBLN4CSfTVt3mMeIX2D/",
	"NFihwjMiq3DWKVPsP/ff41aiGvmDFHbvyScbZf+FM8Xd0sEMSJWrNvifiGV4HlOP0n0eovhhehA2w1OV",
	"QHsQbSKM+Ie6dvGRXcQwCJ/RIDaCT6/81420SD19J8tAhhYDsye8H0wbys5zH541NKUNTA2ElLlPHHCk",
	"pY3s8+FeGgEPTSHGn/XutE3IjBvnmHKJ+1MFZJWqsnxKzCcVsSm8m8BD2oVxhD4iJ8DIupvwGNOUdeqk",
	"AOvUdzq2YuRofalD3q4q36f0j5mJRjh61wWhlsjL8AiTcQxf8jTGlHn/jVnXDNYwCcaZhrzWaCa+5rvD",
	"FfhGkqdf/O3s08dP/v7k08+Ya8AKsQLTJuDvVbBr4wKF7Nt9Pm4k4GB5Nr0JIREHIS74H8OjqmZT/Fkj",
	"bmva7LqD+n3H2JcTF0DiOCYqp91or3CcNrT/97VdqUXe+Y6lUPDr75lWZZkugNLIVQkHSmq3IheK00Aq",
	"0EYY6xhh1wMqbBsRbdZoHsQ02FeUWEnJHIL92FOBsCMhV6mFjAXUIj/DNAfea8RgW5WeV5GnZ9+6vJ5G",
	"FjoUGjEqZgGsUpUX7cWSpSDCF0Q6elnrDZ9oEY9iZBtmS9GyKUL0kedp0otrx+/n9t26xjbN6d0mJsSL",
	"cChvQJpj/onxFB434SStaf93wz8SOUnujGs0y/01eEVSP9jz5vhsEPfQ5OOYBNowP0WCPBCAkde2nXeS",
	"0UOxKCe3Ji8B+hOCA7kvfnzbOpYPPgtBSEKHA+DFz2fbds1LBg/Ob5zc+tsGKdFSfhqjhM7yD73IDay3",
	"uUiiLfJGE2vBEFtSQ7Ewem5tnjevmEe0ksFjZ62UZU4zLcvEI2my4+CZignHqQT6ipcfn2t8JbSxZ4gP",
	"KF6PP42KX8rGSCZUmpulrHzJJ80dvYq9u6nlK3yY/V/g9ih5z/mhvBN+cJuhcYeXFF69bLzRINk1jklB",
	"Vo8/Ywtfd6bSkAvTd+5fB+GkeRgKWix9QCts7YGXqIfW+aOytyDjZYjEYd9F7q3GZ+8hbI/ob8xURk5u",
	"kspT1DcgiwT+UjwqrlN94Lq4ZY2Sm2VAinIZHpkBaViBe+ryKLWJu3RqA8N1Tr6tO7hNXNTt2qam75pc",
	"6uTdu7d2MSXrVrosieuOab/upD7JUdVJfoWEX4QjP4afN0UxP46lgKY0xyNp6nv7UYvyYMBKp+jAh/ls",
	"RRmMMK3+330ZpY97lwYIRjJ2+aXfJl0MISax1s7k0VRRxqcJlQR8t0T6d3zVmNda2B2W0A4GNPH3ZD6m",
	"r5vcHj43TONL83efVZcgQ7xHmwmkNuF2/VrxEu8jcvFJdwup8oR9Scnu/UH5673Fv8Mnf3laPPrk8b8v",
	"/vLo00c5PP3080eP+OdP+ePPP3kMT/7y6dNH8Hj52eeLJ8WTp08WT588/ezTz/NPnj5ePP3s83+/5/iQ",
	"A5kADVUuns3+V3ZWrlR29uo8e+OAbXHCK/ENuL1BXXmJScMQqTmeRNhwUc6ehZ/+/3DCTnK1aYcPv858",
	"qbLZ2trKPDs9vb6+Pom7nK7w6X9mVZ2vT8M8WHizI6+8Om9i9CkOB3e0tR7jpjbJv9y3119evGFnr85P",
	"WoKZPZs9Onl08thXeZe8ErNns0/wJzw9a9z3U0w1e2p8FYnT9q1W0m/3GkPWg3CuV1Cw+82rm39rPLfm",
	"QXi8s/SZ4f5piBibVZwXSFy+XO8MCxBiMBaC9eTRo7AXXtKJLpxTfP3x7P3MNCXg+8LEAKlvWoCTkLXl",
	"T4eL/kFeSnUtGebFpANUbzZc72gFHWxEg+M28ZVBI7sWV5i2zfXu47yqfO2OMZRjwbfuKQ+dkUCa4g/u",
	"hFFNCF+Bw6RQPqwbckvs782TOpgssTvY6JWDOaTPaXKLeoeQxxn6jAlhzRkhs8MA0fNZVSfQ+SU+rDH7",
	"cDaP6lEQNKosGowPMPqq/n8Eo450V00eTffXGniJibXcHxtHqHn4pIEXO/9/c81XK9Anfp3up6snp0EL",
	"OX3vM6Z82PftNI4IO33fSSxTHOgZIp4ONTl9H6rH7x+wUzncx5pGHSYCuq/Z6QIrxk1tCvHqxpeCNG9O",
	"36MCPvr7qbeipj+iIYRu2NOQoGmkJaXiSH/soPC93bqF7B/OtYnGy7nN13V1+h7/g2QbrYiSXJ/arTzF",
	"wJHT9x1E+M8DRHR/b7vHLa42qoAAnFouqeT+vs+n7+nfaCLYVqCF00Ixm5b/lbIenmLl1d3w553Mkz8O",
	"19HJ+HbgMsdsgiZEU3UTxSWvj372OXNbZjctl00/591QwB5KUvtW9mE+e3qHXLmbNDsBzBe8YCGxAc79",
	"+OPNfS4pqtuJliQCIwRPPx4Ene1j38COfacs+wptNR/ms08/5k6cS6c58jIIdDcU/aYdn/416mTvpplc",
	"kaCiKNlF96idFcWA6EmHBGO/UHi7jmFsY1aV99K2SGtVaCHdEubTxOZh+khKchYECakKmMXKrdU1fLgl",
	"T+jFd3FtzxMmZfSN4EMPb7XtgJrMhdiPfqGRE2mYD5Dw+Yswafs+4k+e8idPaXjKp48++XjTX4C+Ejmw",
	"N7CplOZalDv2g2we3tyYx50VRTKBbPfoH+Rx89k2y1UBK5CZZ2DZQhU7X5xq1pngEshaNhBkToN1qaMx",
	"jHDPYLdKSSttOPjs2dtUWIR/3ljVi1LkjCzraFqquF1Hlp8mo2eX+c33WCbmiQIKrBBl3WRzsNfKv5Ye",
	"XiiRtcUqZn7WePHgQRR2x66FLNT1g5MA7s81IJ/38IZpZgkAoxjfYa2w1mHoAByANTYfehqnYGfP5C/5",
	"zeYu+bFT//Rr26CajHn/efH9d9FrRLI0UEAQvoUj0sWHC1phQP41x4hQqin6nGxA5Q5f1Vpua9MpZ3jy",
	"5z30J++/Pe//ukmhTIUMLVYoG7Kk6C44mSTwJnn7+86f3m4xo3DsVOJj9zvjbIVFaIcX1GLHzl8MtFfq",
	"1r8Svthh096tkOD3fRCPYvwj7GWfSOMWslK2CUqnRf0pZP4pZN5KcZ18eKborknLEpWG5gN9bB6qPHce",
	"/mDycgzxGoAyxf70mx7fO9n4oW0rZcuiJOtQsOgDZafoo/lPFvEni7gdi/gaEocRT61nGgmiO87WNZVh",
	"YCqlohNiGaSO0LwuuY4eBB8yYZ/hiGlV8FfhGh/bYJfEFdnr8N2AoIDZxAberQ3vT5b3J8v747C8s8OM",
	"piuY3NrqdQm7Da8aW5dZ17ZQ15GHHGGhYPehj48U//7fp9dc2GyptC/Zw5cW9LCzBV6e+lL1vV/b6rCD",
	"L1jyNvoxTkaX/PWUd52WXce5Y71jHQde9dRX7zgeaRRyKITPbcxeHAOHbL+Jfnv7k2PZBvRVuBHakK5n",
	"p6eYVGetjD2dfZi/74V7xR9/asjjfXOPeDL5gHShtFgJycvMx0ZkbdjWk5NHsw//NwAA//+DZrT1HyAB",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
