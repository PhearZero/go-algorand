// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
