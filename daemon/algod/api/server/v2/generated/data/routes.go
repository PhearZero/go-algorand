// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
