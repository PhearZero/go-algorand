// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Get the block header for the block on the given round.
	// (GET /v2/blocks/{round}/header)
	GetBlockHeader(ctx echo.Context, round uint64, params GetBlockHeaderParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetBlockHeader converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHeader(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockHeaderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHeader(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/header", wrapper.GetBlockHeader, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"sOrKAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
