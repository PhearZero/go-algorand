// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Px/czRTCAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
