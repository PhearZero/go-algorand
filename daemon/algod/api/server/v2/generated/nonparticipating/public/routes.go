// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Get the block header for the block on the given round.
	// (GET /v2/blocks/{round}/header)
	GetBlockHeader(ctx echo.Context, round uint64, params GetBlockHeaderParams) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetBlockHeader converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHeader(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockHeaderParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHeader(ctx, round, params)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/header", wrapper.GetBlockHeader, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
